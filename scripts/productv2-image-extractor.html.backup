<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ProductV2 이미지 추출기</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        textarea {
            width: 100%;
            height: 200px;
            border: 1px solid #ddd;
            padding: 10px;
            border-radius: 4px;
            font-family: monospace;
            font-size: 12px;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            margin: 10px 5px;
        }
        button:hover {
            background: #0056b3;
        }
        .results {
            margin-top: 20px;
        }
        .product {
            border: 1px solid #ddd;
            margin: 10px 0;
            padding: 15px;
            border-radius: 4px;
            background: #f9f9f9;
        }
        .product img {
            max-width: 200px;
            height: auto;
            margin: 5px;
            border: 1px solid #ccc;
        }
        .download-link {
            display: inline-block;
            background: #28a745;
            color: white;
            text-decoration: none;
            padding: 5px 10px;
            border-radius: 3px;
            margin: 2px;
            font-size: 12px;
        }
        .download-link:hover {
            background: #1e7e34;
        }
        .section {
            margin: 20px 0;
            padding: 15px;
            border-left: 4px solid #007bff;
            background: #f8f9fa;
        }
        .v2-info {
            background: #e8f5e8;
            border-left: 4px solid #28a745;
            padding: 15px;
            margin: 10px 0;
        }
        .color-swatches {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin: 10px 0;
        }
        .color-swatch {
            width: 40px;
            height: 40px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🖼️ ProductV2 이미지 추출기</h1>
        <div class="v2-info">
            <h3>✨ ProductV2 최적화 기능</h3>
            <ul>
                <li>📁 <code>public/images/products/v2/</code> 구조에 맞는 파일 저장</li>
                <li>📝 <code>bookcase-{ID}-{type}.webp</code> 네이밍 규칙</li>
                <li>🎨 색상 스와치 썸네일 자동 추출</li>
                <li>🐍 Python 스크립트 자동 생성</li>
            </ul>
        </div>
        
        <div class="section">
            <h3>1단계: HTML 코드 입력</h3>
            <p>product-v2-example.txt 또는 Tylko.com 제품 페이지의 HTML을 붙여넣으세요.</p>
            <textarea id="htmlInput" placeholder="여기에 HTML 코드를 붙여넣으세요..."></textarea>
            <br>
            <button onclick="extractProducts()">🔍 제품 정보 추출</button>
            <button onclick="loadSampleData()">📄 샘플 데이터 로드</button>
            <button onclick="clearAll()">🗑️ 초기화</button>
        </div>
        
        <div class="section">
            <h3>2단계: 추출 결과</h3>
            <div id="results"></div>
        </div>
        
        <div class="section">
            <h3>3단계: ProductV2 다운로드</h3>
            <button onclick="downloadV2JSON()">📄 ProductV2 JSON</button>
            <button onclick="downloadV2CSV()">📊 ProductV2 CSV</button>
            <button onclick="generateV2DownloadScript()">🐍 V2 Python 스크립트</button>
            <button onclick="generateBrowserDownloadPage()">🌐 브라우저 다운로드 페이지</button>
            <button onclick="generatePowerShellScript()">💻 PowerShell 스크립트 (추천!)</button>
            <button onclick="downloadAsZip()" style="background: #28a745;">📦 ZIP 파일로 다운로드 (폴더 구조 포함)</button>
            <button onclick="generateDirectDownloadLinks()" style="background: #17a2b8;">🔗 직접 다운로드 링크 생성</button>
            <button onclick="generateConsoleScript()" style="background: #6f42c1;">🤖 브라우저 콘솔 스크립트 생성</button>
            <button onclick="generateColorSwatchScript()">🎨 색상 스와치 스크립트</button>
        </div>
    </div>

    <script>
        let extractedProducts = [];

        function loadSampleData() {
            // 사용자가 제공한 실제 product-v2-example.txt HTML 샘플
            const sampleHTML = `<div id="plp" class="md-max:px-0 grid-container mt-12"><ul class="grid grid-cols-2 gap-8 md:gap-16 lg:grid-cols-4" data-section="grid-v2-board"><!--[--><li data-testid="product-card"><figure class="flex flex-col h-full relative group/plp-product-card transition-all basic-transition hover:shadow-plp-product-card bg-white" data-index="0" preview="https://media.tylko.com/media/catalogue/catalogue_entry/2024/02/unreal_render_tasks/unreal_50.webp"><a href="/en-ot/furniture/bookcase/3516465,j,tall-slim-white-bookcase-with-doors-103x243x24cm" class="custom" data-testid="product-card-link"><!--[--><!--]--><!--[--><div class="relative w-full overflow-hidden aspect-square"><img src="https://media.tylko.com/media/gallery/furniture_image/2022/05/Living_room_08_living-room-Bookcase_EAPgDsY.jpg" alt="Bookcase in White with Doors" loading="eager" fetchpriority="high" class="object-cover absolute top-0 left-0" style="min-width:calc(100% + 1px);" data-testid="product-card-image-instagrid"><img src="https://media.tylko.com/media/catalogue/catalogue_entry/2024/02/unreal_render_tasks/unreal_50.webp" alt="Bookcase in White with Doors" loading="lazy" class="block group-hover/plp-product-card:opacity-100 group-hover/plp-product-card:scale-100 absolute inset-0 duration-500 ease-in-out opacity-0 transition-all z-1 transform scale-[1.04]" fetchpriority="low" style="min-width:calc(100% + 1px);" data-testid="product-card-image"><div class="semibold-12 px-8 py-2 rounded-4 absolute top-8 left-8 md:top-12 md:left-16 z-2 flex py-2 px-8" style="color:#FFFF66;background-color:#FF3C00;" data-testid="product-card-badge"><!--[-->-40% <span class="ml-4">&amp;</span><span class="ml-4">Free delivery</span><!--]--></div><!----><button class="outline-none ty-btn-icon configure-yours ty-btn-icon--m ty-btn-filled ty-btn-filled--dark hover:bg-white absolute bottom-8 lg:bottom-16 left-1/2 min-w-max -translate-x-1/2 translate-y-64 group-hover/plp-product-card:translate-y-0 md-max:translate-y-0 md-max:ty-btn-icon"></div></a><div class="flex flex-col justify-between h-full md:mt-4"><a href="/en-ot/furniture/bookcase/3516465,j,tall-slim-white-bookcase-with-doors-103x243x24cm" class="custom flex flex-col flex-1 p-8 md:p-16"><div class="flex flex-col flex-1"><p class="semibold-12 uppercase mb-8 md:mb-12 text-[#BE7958]" data-testid="product-card-label">Top seller</p><p class="semibold-14 text-neutral-900" data-testid="product-card-furniture-type">Original Modern</p><h2 class="line-clamp-1 normal-14 md:mt-2 text-neutral-750" data-testid="product-card-furniture-description">Bookcase in White with Doors</h2><h3 class="normal-14 md:mt-2 text-neutral-750" data-testid="product-card-furniture-size">103 x 243 cm</h3></div><aside class="semibold-16 text-neutral-900 mt-8 md:mt-12 text-neutral-900"><span class="semibold-16 text-orange mr-4" data-testid="product-card-price-discount">€1281</span><span class="normal-16 line-through text-neutral-900" data-testid="product-card-price">€2135</span></aside></a></div></figure></li></ul></div>`;
            
            document.getElementById('htmlInput').value = sampleHTML;
        }

        function extractProducts() {
            const htmlContent = document.getElementById('htmlInput').value;
            if (!htmlContent.trim()) {
                alert('HTML 코드를 입력해주세요.');
                return;
            }

            const parser = new DOMParser();
            const doc = parser.parseFromString(htmlContent, 'text/html');
            
            // 디버깅 로그
            console.log('🔍 HTML 파싱 시작...');
            console.log('전체 DOM:', doc.body);
            
            // 다양한 선택자 시도
            let productCards = doc.querySelectorAll('[data-testid="product-card"]');
            console.log('data-testid="product-card" 찾음:', productCards.length);
            
            if (productCards.length === 0) {
                productCards = doc.querySelectorAll('li[data-testid="product-card"]');
                console.log('li[data-testid="product-card"] 찾음:', productCards.length);
            }
            
            if (productCards.length === 0) {
                productCards = doc.querySelectorAll('li figure');
                console.log('li figure 찾음:', productCards.length);
            }
            
            if (productCards.length === 0) {
                // 직접 HTML 텍스트에서 찾기
                const matches = htmlContent.match(/data-testid="product-card"/g);
                console.log('HTML 텍스트에서 product-card 개수:', matches ? matches.length : 0);
                
                // figure 태그로 다시 시도
                productCards = doc.querySelectorAll('figure.flex.flex-col');
                console.log('figure.flex.flex-col 찾음:', productCards.length);
            }
            
            extractedProducts = [];

            productCards.forEach((card, index) => {
                // 제품명 먼저 추출
                const nameElem = card.querySelector('[data-testid="product-card-furniture-description"]');
                const productName = nameElem ? nameElem.textContent.trim() : `Product ${index + 1}`;
                
                const product = {
                    id: generateProductFilename(productName, index),
                    name: productName,
                    furnitureType: '',
                    exactDimensions: '',
                    mainImage: '',
                    instagramImage: '',
                    colorVariants: [],
                    discountPrice: '',
                    originalPrice: '',
                    productUrl: '',
                    labels: [],
                    badges: []
                };

                // 가구 타입
                const typeElem = card.querySelector('[data-testid="product-card-furniture-type"]');
                if (typeElem) product.furnitureType = typeElem.textContent.trim();

                // 정확한 치수
                const sizeElem = card.querySelector('[data-testid="product-card-furniture-size"]');
                if (sizeElem) product.exactDimensions = sizeElem.textContent.trim();

                // 메인 이미지 (기본 표시되는 제품 이미지)
                const mainImg = card.querySelector('[data-testid="product-card-image-instagrid"]');
                if (mainImg) product.mainImage = mainImg.src || '';

                // 호버 이미지 (마우스 오버 시 표시되는 이미지) 
                const hoverImg = card.querySelector('[data-testid="product-card-image"]');
                if (hoverImg) product.instagramImage = hoverImg.src || '';

                // 일반적인 가구 색상 순서 (Tylko.com 패턴 기반)
                const COMMON_FURNITURE_COLORS = [
                    'White', 'Grey', 'Brown', 'Black', 'Green', 
                    'Moss Green', 'Light Wood', 'Dark Wood', 
                    'Beige', 'Sand', 'Pink', 'Blue'
                ];
                
                // 색상 스와치들 추출
                const colorSwatches = card.querySelectorAll('img[src*="thumbnail"], .swatch, [class*="swatch"]');
                colorSwatches.forEach((swatch, swatchIndex) => {
                    if (swatch.src && swatch.src.includes('thumbnail')) {
                        let colorName;
                        
                        // 1순위: 첫 번째 스와치는 제품명에서 색상 추출
                        if (swatchIndex === 0) {
                            colorName = extractColorFromProductName(productName);
                        }
                        
                        // 2순위: URL에서 색상명 추출 시도
                        if (!colorName) {
                            colorName = extractColorFromUrl(swatch.src);
                        }
                        
                        // 3순위: 일반적인 가구 색상 순서 적용
                        if (!colorName) {
                            colorName = COMMON_FURNITURE_COLORS[swatchIndex] || `Color-${swatchIndex + 1}`;
                        }
                        
                        product.colorVariants.push({
                            id: `${product.id}-${colorName.toLowerCase().replace(/\s+/g, '-')}`,
                            name: colorName,
                            thumbnail: swatch.src,
                            mainImage: product.mainImage,
                            instagramImage: product.instagramImage,
                            isDefault: swatchIndex === 0,
                            isSelected: swatchIndex === 0,
                            availability: 'in_stock'
                        });
                    }
                });

                // 가격 정보
                const discountElem = card.querySelector('[data-testid="product-card-price-discount"]');
                if (discountElem) product.discountPrice = discountElem.textContent.trim();

                const originalElem = card.querySelector('[data-testid="product-card-price"]');
                if (originalElem) product.originalPrice = originalElem.textContent.trim();

                // 제품 URL
                const linkElem = card.querySelector('[data-testid="product-card-link"]');
                if (linkElem) product.productUrl = linkElem.href || '';

                // 라벨들
                const labelElem = card.querySelector('[data-testid="product-card-label"]');
                if (labelElem) {
                    product.labels.push({
                        text: labelElem.textContent.trim(),
                        color: '#BE7958'
                    });
                }

                // 배지 생성 (할인 정보 기반)
                if (product.discountPrice && product.originalPrice) {
                    product.badges.push({
                        type: 'discount',
                        text: '-40% & Free delivery',
                        style: {
                            backgroundColor: '#FF3C00',
                            color: '#FFFF66'
                        },
                        priority: 1
                    });
                }

                extractedProducts.push(product);
            });

            console.log('✅ 추출 완료:', extractedProducts.length + '개 제품');
            console.log('추출된 제품들:', extractedProducts);
            
            if (extractedProducts.length === 0) {
                alert('제품을 찾을 수 없습니다. 콘솔을 확인해주세요 (F12)');
            }
            
            displayResults();
        }

        function extractColorFromUrl(url) {
            // URL에서 색상명 추출 시도
            const colorKeywords = ['white', 'grey', 'gray', 'brown', 'black', 'green', 'blue', 'red', 'beige', 'sand', 'pink', 'moss'];
            const urlLower = url.toLowerCase();
            
            for (const color of colorKeywords) {
                if (urlLower.includes(color)) {
                    return color.charAt(0).toUpperCase() + color.slice(1);
                }
            }
            
            // URL에서 숫자 ID 추출 (unreal_50 → Color-50)
            const numberMatch = url.match(/unreal_(\d+)/);
            if (numberMatch) {
                return `Color-${numberMatch[1]}`;
            }
            
            return null;
        }
        
        function extractColorFromProductName(productName) {
            // 제품명에서 색상 추출 ("Bookcase in White with Doors" → "White")
            if (!productName) return null;
            
            const colorKeywords = [
                'white', 'grey', 'gray', 'brown', 'black', 'green', 'blue', 'red', 
                'beige', 'sand', 'pink', 'moss green', 'moss', 'light wood', 'dark wood',
                'navy', 'cream', 'ivory', 'charcoal', 'oak', 'walnut'
            ];
            
            const nameLower = productName.toLowerCase();
            
            // 긴 키워드부터 먼저 확인 (예: "moss green" before "moss")
            const sortedKeywords = colorKeywords.sort((a, b) => b.length - a.length);
            
            for (const color of sortedKeywords) {
                if (nameLower.includes(color)) {
                    return color.split(' ').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1)
                    ).join(' ');
                }
            }
            
            return null;
        }

        function generateProductFilename(productName, index = 0) {
            if (!productName || productName.trim() === '') {
                return `bookcase-${String(index + 1).padStart(2, '0')}`;
            }
            
            // "Bookcase in White with Doors" → "bookcase-white-doors"
            let filename = productName
                .toLowerCase()
                .replace(/\s+in\s+/gi, '-')      // " in " → "-"
                .replace(/\s+with\s+/gi, '-')    // " with " → "-"  
                .replace(/\s+and\s+/gi, '-')     // " and " → "-"
                .replace(/[^a-z0-9\s-]/gi, '')   // 특수문자 제거
                .replace(/\s+/g, '-')            // 공백 → "-"
                .replace(/-+/g, '-')             // 연속 하이픈 → 단일 하이픈
                .replace(/^-|-$/g, '');          // 앞뒤 하이픈 제거
            
            // 너무 길면 줄이기 (최대 30자)
            if (filename.length > 30) {
                filename = filename.substring(0, 30).replace(/-$/, '');
            }
            
            // 빈 결과면 기본값 사용
            if (!filename) {
                return `bookcase-${String(index + 1).padStart(2, '0')}`;
            }
            
            return filename;
        }

        function displayResults() {
            const resultsDiv = document.getElementById('results');
            if (extractedProducts.length === 0) {
                resultsDiv.innerHTML = '<p>추출된 제품이 없습니다.</p>';
                return;
            }

            let html = `<h4>🎯 총 ${extractedProducts.length}개 ProductV2 데이터 추출 완료</h4>`;
            
            extractedProducts.forEach((product, index) => {
                html += `
                <div class="product">
                    <h5>📦 ${product.id}: ${product.name || 'N/A'}</h5>
                    <p><strong>🏷️ 가구 타입:</strong> ${product.furnitureType || 'N/A'}</p>
                    <p><strong>📏 정확한 치수:</strong> ${product.exactDimensions || 'N/A'}</p>
                    <p><strong>💰 가격:</strong> ${product.discountPrice || 'N/A'} <del>${product.originalPrice || ''}</del></p>
                    <p><strong>🏆 라벨:</strong> ${product.labels.map(l => l.text).join(', ') || 'N/A'}</p>
                    
                    <div>
                        <strong>🖼️ V2 이미지들:</strong><br>
                        ${product.mainImage ? `
                            <div>
                                <img src="${product.mainImage}" alt="메인 이미지" loading="lazy">
                                <br><a href="${product.mainImage}" class="download-link" target="_blank">Main 다운로드</a>
                                <small>→ <code>${product.id}-main.webp</code></small>
                            </div>
                        ` : ''}
                        
                        ${product.instagramImage ? `
                            <div>
                                <img src="${product.instagramImage}" alt="호버 이미지" loading="lazy">
                                <br><a href="${product.instagramImage}" class="download-link" target="_blank">Hover 다운로드</a>
                                <small>→ <code>${product.id}-hover.webp</code></small>
                            </div>
                        ` : ''}
                        
                        ${product.colorVariants.length > 0 ? `
                            <div>
                                <p><strong>🎨 색상 변형 (${product.colorVariants.length}개):</strong></p>
                                <div class="color-swatches">
                                    ${product.colorVariants.map((variant, i) => `
                                        <div>
                                            <img src="${variant.thumbnail}" alt="${variant.name}" class="color-swatch">
                                            <br><small>${variant.name}</small>
                                            <br><a href="${variant.thumbnail}" class="download-link" target="_blank">스와치</a>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        ` : ''}
                    </div>
                </div>`;
            });

            resultsDiv.innerHTML = html;
        }

        function downloadV2JSON() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품 정보를 추출해주세요.');
                return;
            }

            const dataStr = JSON.stringify({
                version: '2.0',
                extractedAt: new Date().toISOString(),
                totalProducts: extractedProducts.length,
                products: extractedProducts
            }, null, 2);
            
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'productv2-data.json';
            link.click();
        }

        function downloadV2CSV() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품 정보를 추출해주세요.');
                return;
            }

            let csv = 'ID,Name,FurnitureType,ExactDimensions,DiscountPrice,OriginalPrice,MainImageURL,InstagramImageURL,ColorVariantsCount,Labels\n';
            
            extractedProducts.forEach(product => {
                csv += `"${product.id}","${product.name}","${product.furnitureType}","${product.exactDimensions}","${product.discountPrice}","${product.originalPrice}","${product.mainImage}","${product.instagramImage}",${product.colorVariants.length},"${product.labels.map(l => l.text).join('; ')}"\n`;
            });

            const dataBlob = new Blob([csv], {type: 'text/csv'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'productv2-data.csv';
            link.click();
        }

        function generateV2DownloadScript() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품 정보를 추출해주세요.');
                return;
            }

            let script = `#!/usr/bin/env python3
# 🖼️ ProductV2 자동 폴더 구조 + 일괄 다운로드 스크립트
# 제품별 폴더 생성 및 체계적 이미지 다운로드

import requests
import os
import time
from pathlib import Path
from urllib.parse import urlparse

def download_image(url, filepath, description=""):
    """이미지를 다운로드하고 저장합니다."""
    try:
        print(f"📥 {description}: {os.path.basename(filepath)}")
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://tylko.com/'
        }
        
        response = requests.get(url, headers=headers, stream=True, timeout=30)
        response.raise_for_status()
        
        # 디렉토리 생성
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        
        with open(filepath, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        
        print(f"✅ 저장됨: {filepath}")
        return True
        
    except Exception as e:
        print(f"❌ 실패 {description}: {e}")
        return False

def main():
    """제품별 폴더 구조로 이미지 일괄 다운로드"""
    
    base_path = Path("downloads")
    base_path.mkdir(exist_ok=True)
    
    success_count = 0
    total_count = 0
    
    print("🚀 ProductV2 자동 폴더 구조 + 일괄 다운로드 시작...")
    print(f"📁 저장 위치: {base_path.absolute()}")
    print(f"📦 총 ${extractedProducts.length}개 제품")
    print()

`;

            extractedProducts.forEach((product, index) => {
                script += `    # 📦 제품 ${index + 1}: ${product.name}\n`;
                script += `    print("\\n📦 [${index + 1}/${extractedProducts.length}] ${product.name}")\n`;
                script += `    \n`;
                script += `    # 제품별 폴더 생성\n`;
                script += `    product_folder = base_path / "${product.id}"\n`;
                script += `    (product_folder / "main").mkdir(parents=True, exist_ok=True)\n`;
                script += `    (product_folder / "hover").mkdir(parents=True, exist_ok=True)\n`;
                script += `    (product_folder / "colors").mkdir(parents=True, exist_ok=True)\n`;
                script += `    \n`;
                
                // 메인 이미지
                if (product.mainImage) {
                    script += `    # 메인 이미지 다운로드\n`;
                    script += `    total_count += 1\n`;
                    script += `    if download_image("${product.mainImage}", product_folder / "main" / "${product.id}-main.webp", "메인 이미지"):\n`;
                    script += `        success_count += 1\n`;
                    script += `    time.sleep(0.3)\n\n`;
                }
                
                // 호버 이미지
                if (product.instagramImage) {
                    script += `    # 호버 이미지 다운로드\n`;
                    script += `    total_count += 1\n`;
                    script += `    if download_image("${product.instagramImage}", product_folder / "hover" / "${product.id}-hover.webp", "호버 이미지"):\n`;
                    script += `        success_count += 1\n`;
                    script += `    time.sleep(0.3)\n\n`;
                }
                
                // 색상 변형 이미지들
                if (product.colorVariants && product.colorVariants.length > 0) {
                    script += `    # 색상 변형 이미지들 다운로드 (${product.colorVariants.length}개)\n`;
                    product.colorVariants.forEach((variant, colorIndex) => {
                        if (variant.thumbnail) {
                            const safeColorName = variant.name.toLowerCase().replace(/[^a-z0-9]/g, '-');
                            script += `    total_count += 1\n`;
                            script += `    if download_image("${variant.thumbnail}", product_folder / "colors" / "${product.id}-${safeColorName}.webp", "${variant.name} 색상"):\n`;
                            script += `        success_count += 1\n`;
                            script += `    time.sleep(0.2)\n`;
                        }
                    });
                    script += `\n`;
                }
                
                script += `    print(f"✅ ${product.name} 완료\\n")\n\n`;
            });

            script += `
    print()
    print("🎉 전체 다운로드 완료!")
    print(f"📊 통계: 성공 {success_count}/{total_count} (실패: {total_count - success_count})")
    print(f"📁 저장 위치: {base_path.absolute()}")
    print()
    
    # 다운로드된 폴더 구조 표시
    print("📂 다운로드된 폴더 구조:")
    for product_folder in sorted(base_path.glob("*")):
        if product_folder.is_dir():
            print(f"├── 📁 {product_folder.name}/")
            for subfolder in ["main", "hover", "colors"]:
                subfolder_path = product_folder / subfolder
                if subfolder_path.exists():
                    file_count = len(list(subfolder_path.glob("*.webp")))
                    print(f"│   ├── 📁 {subfolder}/ ({file_count}개 파일)")
    
    print()
    print("🎯 다음 단계:")
    print("1. downloads 폴더에서 public/images/products/v2/로 파일 이동")
    print("2. src/data/migration/imageMapping.ts 업데이트") 
    print("3. ProductV2 컴포넌트에서 테스트")
    print("4. 필요시 색상명 수동 보정")

if __name__ == "__main__":
    main()
`;

            const dataBlob = new Blob([script], {type: 'text/plain'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'download_productv2_images.py';
            link.click();
        }

        function generateBrowserDownloadPage() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품 정보를 추출해주세요.');
                return;
            }

            const htmlContent = `<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>🖼️ ProductV2 브라우저 다운로드</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            padding: 20px; 
            background: #f5f5f5; 
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white; 
            padding: 30px; 
            border-radius: 12px; 
            box-shadow: 0 4px 20px rgba(0,0,0,0.1); 
        }
        .product-item { 
            margin: 20px 0; 
            padding: 20px; 
            border: 2px solid #e0e0e0; 
            border-radius: 12px; 
            background: #f9f9f9;
            transition: all 0.3s ease;
        }
        .product-item:hover {
            border-color: #007bff;
            box-shadow: 0 4px 12px rgba(0,123,255,0.15);
        }
        .download-btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            padding: 12px 20px;
            text-decoration: none;
            border-radius: 8px;
            margin: 6px;
            display: inline-block;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0,123,255,0.3);
        }
        .download-btn:hover { 
            background: linear-gradient(135deg, #0056b3, #003d82);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,123,255,0.4);
        }
        .download-btn.main { background: linear-gradient(135deg, #28a745, #1e7e34); }
        .download-btn.hover { background: linear-gradient(135deg, #ffc107, #e0a800); }
        .download-btn.color { background: linear-gradient(135deg, #6f42c1, #5a32a3); }
        .progress { 
            margin: 20px 0; 
            padding: 20px; 
            background: #e8f4fd; 
            border-radius: 8px; 
            border-left: 4px solid #007bff;
        }
        .stats {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
        }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        h3 { color: #495057; margin-bottom: 15px; }
        .batch-download {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
            border-radius: 12px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🖼️ ProductV2 브라우저 다운로드</h1>
        
        <div class="stats">
            <strong>📊 추출된 데이터:</strong> ${extractedProducts.length}개 제품, 총 ${extractedProducts.reduce((total, p) => total + (p.colorVariants?.length || 0), 0)}개 색상 변형
        </div>
        
        <div class="batch-download">
            <h3>🚀 일괄 다운로드 방법</h3>
            <p><strong>방법 1: PowerShell 스크립트</strong> (추천!)</p>
            <ol style="text-align: left; margin: 10px auto; max-width: 600px;">
                <li>download-images.ps1 파일 생성됨</li>
                <li>PowerShell 열기 (관리자 권한)</li>
                <li>Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass</li>
                <li>cd scripts → ./download-images.ps1 실행</li>
            </ol>
            <p><strong>방법 2: 브라우저 확장</strong></p>
            <p>"DownThemAll" 또는 "Bulk Image Downloader" 설치 후 일괄 다운로드</p>
            <p><strong>방법 3: 수동</strong></p>
            <p>각 링크 우클릭 → "다른 이름으로 링크 저장" → 적절한 폴더에 저장</p>
        </div>

${extractedProducts.map((product, index) => `
        <div class="product-item">
            <h3>📦 ${product.name || `제품 ${index + 1}`}</h3>
            <p><strong>ID:</strong> ${product.id} | <strong>타입:</strong> ${product.furnitureType || 'N/A'} | <strong>크기:</strong> ${product.exactDimensions || 'N/A'}</p>
            
            <div>
                ${product.mainImage ? `<a href="${product.mainImage}" class="download-btn main" download="${product.id}-main.webp">📷 메인 이미지</a>` : ''}
                ${product.instagramImage ? `<a href="${product.instagramImage}" class="download-btn hover" download="${product.id}-hover.webp">🖼️ 호버 이미지</a>` : ''}
                ${product.colorVariants?.map(color => {
                    const safeColorName = color.name.toLowerCase().replace(/[^a-z0-9]/g, '-');
                    return `<a href="${color.thumbnail}" class="download-btn color" download="${product.id}-${safeColorName}.webp">🎨 ${color.name}</a>`;
                }).join('') || ''}
            </div>
            
            <div style="margin-top: 15px; font-size: 12px; color: #666;">
                <strong>폴더 구조:</strong> downloads/${product.id}/main/, downloads/${product.id}/hover/, downloads/${product.id}/colors/
            </div>
        </div>
`).join('')}

        <div class="progress">
            <h3>📁 권장 폴더 구조</h3>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 8px; overflow-x: auto;">
downloads/
${extractedProducts.map(p => `├── ${p.id}/
│   ├── main/     # ${p.id}-main.webp
│   ├── hover/    # ${p.id}-hover.webp
│   └── colors/   # ${p.id}-white.webp, ${p.id}-grey.webp...`).join('\n')}
            </pre>
        </div>
        
        <div class="progress">
            <p><strong>✅ 다운로드 완료 후:</strong></p>
            <ol>
                <li>public/images/products/v2/ 폴더에 정리</li>
                <li>src/data/migration/imageMapping.ts 업데이트</li>
                <li>ProductV2 컴포넌트에서 테스트</li>
            </ol>
        </div>
    </div>

    <script>
        // 다운로드 진행상황 추적 (옵션)
        document.querySelectorAll('.download-btn').forEach(link => {
            link.addEventListener('click', function() {
                this.style.background = 'linear-gradient(135deg, #28a745, #1e7e34)';
                this.innerHTML = '✅ ' + this.innerHTML.replace('📷 ', '').replace('🖼️ ', '').replace('🎨 ', '');
            });
        });
        
        console.log('ProductV2 다운로드 페이지 준비 완료!');
        console.log('총 \${extractedProducts.length}개 제품, \${extractedProducts.reduce((total, p) => total + (p.colorVariants?.length || 0) + 2, 0)}개 이미지');
    </` + `script>
</body>
</html>`;

            const dataBlob = new Blob([htmlContent], {type: 'text/html'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'productv2-browser-download.html';
            link.click();
        }

        function generateColorSwatchScript() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품 정보를 추출해주세요.');
                return;
            }

            // 모든 색상 스와치 URL 수집
            const allSwatches = new Set();
            extractedProducts.forEach(product => {
                product.colorVariants.forEach(variant => {
                    if (variant.thumbnail) {
                        allSwatches.add(variant.thumbnail);
                    }
                });
            });

            let script = `#!/usr/bin/env python3
# 🎨 색상 스와치 썸네일 다운로드 스크립트

import requests
import os
import time
from pathlib import Path

def download_swatch(url, filename):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Referer': 'https://tylko.com/'
        }
        
        response = requests.get(url, headers=headers, stream=True, timeout=30)
        response.raise_for_status()
        
        filepath = Path("public/images/products/v2/thumbnail") / filename
        os.makedirs(filepath.parent, exist_ok=True)
        
        with open(filepath, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
        
        print(f"✅ 스와치 다운로드: {filename}")
        return True
        
    except Exception as e:
        print(f"❌ 실패 {filename}: {e}")
        return False

def main():
    print("🎨 색상 스와치 썸네일 다운로드...")
    print()
    
`;

            Array.from(allSwatches).forEach((swatchUrl, index) => {
                const colorName = extractColorFromUrl(swatchUrl) || `swatch-${index + 1}`;
                const filename = `swatch-${colorName.toLowerCase().replace(/\s+/g, '-')}.webp`;
                
                script += `    download_swatch("${swatchUrl}", "${filename}")\n`;
                script += `    time.sleep(0.3)\n\n`;
            });

            script += `    print("🎯 색상 스와치 다운로드 완료!")

if __name__ == "__main__":
    main()
`;

            const dataBlob = new Blob([script], {type: 'text/plain'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'download_color_swatches.py';
            link.click();
        }

        function generatePowerShellScript() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품을 추출해주세요!');
                return;
            }

            let script = `# PowerShell 이미지 다운로드 스크립트
# Cloudflare 우회 + 폴더 구조 자동 생성

# 다운로드 함수
function Download-Image {
    param(
        [string]$url,
        [string]$outputPath
    )
    
    try {
        # 폴더 생성
        $folder = Split-Path $outputPath -Parent
        if (!(Test-Path $folder)) {
            New-Item -ItemType Directory -Path $folder -Force | Out-Null
        }
        
        # 다운로드
        $headers = @{
            "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            "Referer" = "https://tylko.com/"
            "Accept" = "image/webp,image/apng,image/*,*/*;q=0.8"
        }
        
        Write-Host "📥 다운로드 중: $outputPath" -ForegroundColor Yellow
        Invoke-WebRequest -Uri $url -OutFile $outputPath -Headers $headers -UseBasicParsing
        Write-Host "✅ 완료: $outputPath" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "❌ 실패: $outputPath - $_" -ForegroundColor Red
        return $false
    }
}

# 메인 스크립트
Write-Host "🚀 ProductV2 이미지 다운로드 시작" -ForegroundColor Cyan
Write-Host "=" * 50

$baseFolder = "public\\images\\products\\v2"
$successCount = 0
$totalCount = 0

`;

            // 각 제품별 다운로드 코드 생성
            extractedProducts.forEach((product, index) => {
                const productNumber = index + 1;
                script += `# 제품 ${productNumber}: ${product.name}
Write-Host "\`n📦 제품 ${productNumber}: ${product.name}" -ForegroundColor Magenta
$product${productNumber} = "${product.id}"

`;

                // 메인 이미지
                if (product.mainImage) {
                    script += `$totalCount++
if (Download-Image "${product.mainImage}" "$baseFolder\\$product${productNumber}\\main\\$product${productNumber}-main.jpg") {
    $successCount++
}
Start-Sleep -Milliseconds 500

`;
                }

                // 호버 이미지 (Instagram 이미지)
                if (product.instagramImage) {
                    const extension = product.instagramImage.includes('.webp') ? 'webp' : 'jpg';
                    script += `$totalCount++
if (Download-Image "${product.instagramImage}" "$baseFolder\\$product${productNumber}\\hover\\$product${productNumber}-hover.${extension}") {
    $successCount++
}
Start-Sleep -Milliseconds 500

`;
                }

                // 색상 변형들
                if (product.colorVariants && product.colorVariants.length > 0) {
                    script += `# 색상 변형들
$colors${productNumber} = @(
`;
                    product.colorVariants.forEach((color, colorIndex) => {
                        const isLastColor = colorIndex === product.colorVariants.length - 1;
                        const comma = isLastColor ? '' : ',';
                        script += `    @{name="${color.name.toLowerCase()}"; url="${color.thumbnail}"}${comma}
`;
                    });
                    script += `)

foreach ($color in $colors${productNumber}) {
    $totalCount++
    $extension = if ($color.url -like "*.webp") { "webp" } else { "jpg" }
    if (Download-Image $color.url "$baseFolder\\$product${productNumber}\\colors\\$product${productNumber}-$($color.name).$extension") {
        $successCount++
    }
    Start-Sleep -Milliseconds 300
}

`;
                }
            });

            // 스크립트 마무리
            script += `Write-Host "\`n" 
Write-Host "=" * 50
Write-Host "🎉 다운로드 완료!" -ForegroundColor Green
Write-Host "📊 성공: $successCount/$totalCount" -ForegroundColor Cyan
Write-Host "📁 저장 위치: $(Get-Location)\\$baseFolder" -ForegroundColor Yellow

# 폴더 구조 표시
Write-Host "\`n📂 생성된 폴더 구조:" -ForegroundColor Magenta
if (Test-Path $baseFolder) {
    Get-ChildItem -Path $baseFolder -Recurse -Directory | ForEach-Object {
        $indent = "  " * ($_.FullName.Split('\\').Count - (Get-Location).Path.Split('\\').Count - 3)
        Write-Host "$indent📁 $($_.Name)"
    }
}

Write-Host "\`n✅ 완료! 다음 단계:" -ForegroundColor Green
Write-Host "1. 이미지 폴더 확인: public/images/products/v2/"
Write-Host "2. src/data/migration/imageMapping.ts 업데이트"
Write-Host "3. ProductV2 컴포넌트에서 테스트"
`;

            // 파일 다운로드
            const dataBlob = new Blob([script], {type: 'text/plain'});
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = 'download-productv2-images.ps1';
            link.click();
            
            alert(`PowerShell 스크립트가 생성되었습니다!
            
실행 방법:
1. PowerShell을 관리자 권한으로 실행
2. Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
3. .\\download-productv2-images.ps1

${extractedProducts.length}개 제품의 이미지를 폴더 구조에 맞게 다운로드합니다.`);
        }

        async function downloadAsZip() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품을 추출해주세요!');
                return;
            }

            // 안내 메시지
            const confirmMsg = `ZIP 다운로드 시작!\n\n주의사항:\n- CORS 정책으로 일부 이미지가 실패할 수 있습니다\n- 실패 시 "🔗 직접 다운로드 링크 생성" 버튼을 사용하세요\n\n계속하시겠습니까?`;
            
            if (!confirm(confirmMsg)) {
                return;
            }

            const zip = new JSZip();
            let downloadedCount = 0;
            let failedCount = 0;
            let totalCount = 0;
            
            // 총 이미지 개수 계산
            extractedProducts.forEach(product => {
                if (product.mainImage) totalCount++;
                if (product.instagramImage) totalCount++;
                totalCount += product.colorVariants ? product.colorVariants.length : 0;
            });

            // 진행 상황 표시
            const progressDiv = document.createElement('div');
            progressDiv.style.position = 'fixed';
            progressDiv.style.top = '50%';
            progressDiv.style.left = '50%';
            progressDiv.style.transform = 'translate(-50%, -50%)';
            progressDiv.style.background = 'white';
            progressDiv.style.padding = '20px';
            progressDiv.style.border = '2px solid #007bff';
            progressDiv.style.borderRadius = '8px';
            progressDiv.style.zIndex = '9999';
            progressDiv.style.textAlign = 'center';
            progressDiv.style.minWidth = '400px';
            progressDiv.innerHTML = `
                <h3>🚀 이미지 다운로드 중...</h3>
                <p id="progress-text">0/${totalCount} 시도 중...</p>
                <div style="width: 300px; height: 20px; border: 1px solid #ccc; border-radius: 10px; overflow: hidden; margin: 10px 0;">
                    <div id="progress-bar" style="width: 0%; height: 100%; background: #007bff; transition: width 0.3s;"></div>
                </div>
                <p id="status-text"><small>시작 중...</small></p>
                <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 15px; background: #dc3545; color: white; border: none; border-radius: 4px;">취소</button>
            `;
            document.body.appendChild(progressDiv);

            // DOM 요소가 추가될 때까지 잠깐 대기
            await new Promise(resolve => setTimeout(resolve, 100));

            // 이미지 다운로드 헬퍼 함수 (프록시 사용 시도)
            async function fetchImage(url) {
                const methods = [
                    // 방법 1: 직접 fetch
                    () => fetch(url, {
                        mode: 'cors',
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                        }
                    }),
                    // 방법 2: no-cors 모드 (제한적)
                    () => fetch(url, { mode: 'no-cors' }),
                    // 방법 3: img 태그를 통한 우회
                    () => new Promise((resolve, reject) => {
                        const img = new Image();
                        img.crossOrigin = 'anonymous';
                        img.onload = () => {
                            const canvas = document.createElement('canvas');
                            const ctx = canvas.getContext('2d');
                            canvas.width = img.width;
                            canvas.height = img.height;
                            ctx.drawImage(img, 0, 0);
                            canvas.toBlob(resolve, 'image/webp', 0.9);
                        };
                        img.onerror = reject;
                        img.src = url;
                    })
                ];

                for (const method of methods) {
                    try {
                        const result = await method();
                        if (result instanceof Blob) {
                            return result;
                        } else if (result.ok) {
                            return await result.blob();
                        }
                    } catch (error) {
                        console.warn('Method failed:', error);
                    }
                }
                return null;
            }

            // 진행 상황 업데이트
            function updateProgress(currentUrl = '') {
                const processed = downloadedCount + failedCount;
                const percentage = Math.round((processed / totalCount) * 100);
                
                const progressText = document.getElementById('progress-text');
                const progressBar = document.getElementById('progress-bar');
                const statusText = document.getElementById('status-text');
                
                if (progressText) {
                    progressText.textContent = `${processed}/${totalCount} 완료 (성공: ${downloadedCount}, 실패: ${failedCount})`;
                }
                if (progressBar) {
                    progressBar.style.width = `${percentage}%`;
                }
                if (statusText) {
                    statusText.innerHTML = `<small>처리 중: ${currentUrl.substring(0, 60)}...</small>`;
                }
            }

            try {
                // 각 제품별 이미지 다운로드
                for (const product of extractedProducts) {
                    const productFolder = product.id;

                    // 메인 이미지
                    if (product.mainImage) {
                        updateProgress(product.mainImage);
                        const imageBlob = await fetchImage(product.mainImage);
                        if (imageBlob) {
                            const extension = product.mainImage.includes('.webp') ? 'webp' : 'jpg';
                            zip.folder(productFolder).folder('main').file(`${productFolder}-main.${extension}`, imageBlob);
                            downloadedCount++;
                        } else {
                            failedCount++;
                        }
                        await new Promise(resolve => setTimeout(resolve, 300));
                    }

                    // 호버 이미지
                    if (product.instagramImage) {
                        updateProgress(product.instagramImage);
                        const imageBlob = await fetchImage(product.instagramImage);
                        if (imageBlob) {
                            const extension = product.instagramImage.includes('.webp') ? 'webp' : 'jpg';
                            zip.folder(productFolder).folder('hover').file(`${productFolder}-hover.${extension}`, imageBlob);
                            downloadedCount++;
                        } else {
                            failedCount++;
                        }
                        await new Promise(resolve => setTimeout(resolve, 300));
                    }

                    // 색상 변형들
                    if (product.colorVariants && product.colorVariants.length > 0) {
                        for (const color of product.colorVariants) {
                            updateProgress(color.thumbnail);
                            const imageBlob = await fetchImage(color.thumbnail);
                            if (imageBlob) {
                                const extension = color.thumbnail.includes('.webp') ? 'webp' : 'jpg';
                                const colorName = color.name.toLowerCase().replace(/\s+/g, '-');
                                zip.folder(productFolder).folder('colors').file(`${productFolder}-${colorName}.${extension}`, imageBlob);
                                downloadedCount++;
                            } else {
                                failedCount++;
                            }
                            await new Promise(resolve => setTimeout(resolve, 300));
                        }
                    }
                }

                // ZIP 파일 생성 및 다운로드
                if (downloadedCount > 0) {
                    progressDiv.innerHTML = '<h3>📦 ZIP 파일 생성 중...</h3><p>잠시만 기다려주세요...</p>';
                    
                    const zipBlob = await zip.generateAsync({type: 'blob'});
                    const link = document.createElement('a');
                    link.href = URL.createObjectURL(zipBlob);
                    link.download = 'productv2-images.zip';
                    link.click();

                    // 결과 메시지
                    progressDiv.innerHTML = `
                        <h3>${downloadedCount > 0 ? '✅' : '⚠️'} 다운로드 완료!</h3>
                        <p><strong>결과:</strong> ${downloadedCount}개 성공, ${failedCount}개 실패 (총 ${totalCount}개)</p>
                        ${failedCount > 0 ? '<p style="color: #dc3545;"><strong>실패한 이미지가 있습니다!</strong><br>"🔗 직접 다운로드 링크 생성" 버튼을 사용하세요.</p>' : ''}
                        <p><strong>폴더 구조:</strong></p>
                        <ul style="text-align: left; display: inline-block;">
                            <li>제품명/main/ - 메인 이미지</li>
                            <li>제품명/hover/ - 호버 이미지</li>
                            <li>제품명/colors/ - 색상 변형들</li>
                        </ul>
                        <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 15px;">닫기</button>
                    `;
                } else {
                    progressDiv.innerHTML = `
                        <h3>❌ 모든 다운로드 실패</h3>
                        <p>CORS 정책으로 인해 모든 이미지 다운로드가 실패했습니다.</p>
                        <p><strong>해결책:</strong> "🔗 직접 다운로드 링크 생성" 버튼을 사용하세요.</p>
                        <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 15px;">닫기</button>
                    `;
                }

            } catch (error) {
                console.error('ZIP 다운로드 오류:', error);
                progressDiv.innerHTML = `
                    <h3>❌ 다운로드 실패</h3>
                    <p>오류: ${error.message}</p>
                    <p><strong>대안:</strong> "🔗 직접 다운로드 링크 생성" 버튼을 사용하세요.</p>
                    <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 15px;">닫기</button>
                `;
            }
        }

        function generateDirectDownloadLinks() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품을 추출해주세요!');
                return;
            }

            let html = `
                <div style="max-width: 1200px; margin: 20px auto; padding: 20px; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                    <h2>🔗 직접 다운로드 링크</h2>
                    <p><strong>사용법:</strong> 각 이미지 링크를 우클릭 → "다른 이름으로 링크 저장" → 적절한 폴더에 저장</p>
                    <p><strong>권장 폴더 구조:</strong> <code>public/images/products/v2/제품명/main|hover|colors/</code></p>
                    <hr style="margin: 20px 0;">
            `;

            extractedProducts.forEach((product, index) => {
                html += `
                    <div style="margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9;">
                        <h3>📦 ${product.name}</h3>
                        <p><strong>제품 ID:</strong> <code>${product.id}</code></p>
                        <div style="margin: 15px 0;">
                `;

                // 메인 이미지
                if (product.mainImage) {
                    const extension = product.mainImage.includes('.webp') ? 'webp' : 'jpg';
                    html += `
                        <div style="margin: 10px 0;">
                            <strong>📸 메인 이미지:</strong><br>
                            <a href="${product.mainImage}" download="${product.id}-main.${extension}" style="display: inline-block; padding: 8px 16px; background: #007bff; color: white; text-decoration: none; border-radius: 4px; margin: 5px 0;">
                                다운로드: ${product.id}-main.${extension}
                            </a>
                            <p style="font-size: 12px; color: #666; margin: 5px 0;">저장 위치: public/images/products/v2/${product.id}/main/</p>
                        </div>
                    `;
                }

                // 호버 이미지
                if (product.instagramImage) {
                    const extension = product.instagramImage.includes('.webp') ? 'webp' : 'jpg';
                    html += `
                        <div style="margin: 10px 0;">
                            <strong>🎯 호버 이미지:</strong><br>
                            <a href="${product.instagramImage}" download="${product.id}-hover.${extension}" style="display: inline-block; padding: 8px 16px; background: #28a745; color: white; text-decoration: none; border-radius: 4px; margin: 5px 0;">
                                다운로드: ${product.id}-hover.${extension}
                            </a>
                            <p style="font-size: 12px; color: #666; margin: 5px 0;">저장 위치: public/images/products/v2/${product.id}/hover/</p>
                        </div>
                    `;
                }

                // 색상 변형들
                if (product.colorVariants && product.colorVariants.length > 0) {
                    html += `<div style="margin: 10px 0;"><strong>🎨 색상 변형들:</strong><br>`;
                    product.colorVariants.forEach(color => {
                        const extension = color.thumbnail.includes('.webp') ? 'webp' : 'jpg';
                        const colorName = color.name.toLowerCase().replace(/\s+/g, '-');
                        html += `
                            <a href="${color.thumbnail}" download="${product.id}-${colorName}.${extension}" style="display: inline-block; padding: 6px 12px; background: #ffc107; color: black; text-decoration: none; border-radius: 4px; margin: 3px;">
                                ${color.name}
                            </a>
                        `;
                    });
                    html += `<p style="font-size: 12px; color: #666; margin: 5px 0;">저장 위치: public/images/products/v2/${product.id}/colors/</p></div>`;
                }

                html += '</div></div>';
            });

            html += '</div>';

            // 새 창에서 열기
            const newWindow = window.open('', '_blank');
            newWindow.document.write(`
                <!DOCTYPE html>
                <html lang="ko">
                <head>
                    <meta charset="UTF-8">
                    <title>ProductV2 직접 다운로드</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                        a:hover { opacity: 0.8; }
                        code { background: #e9ecef; padding: 2px 4px; border-radius: 3px; }
                    </style>
                </head>
                <body>
                    ${html}
                </body>
                </html>
            `);
        }

        function generateConsoleScript() {
            if (extractedProducts.length === 0) {
                alert('먼저 제품을 추출해주세요!');
                return;
            }

            let script = `// 🤖 브라우저 콘솔에서 실행할 자동 다운로드 스크립트
// 사용법:
// 1. F12를 눌러 개발자 도구 열기
// 2. Console 탭 클릭
// 3. 아래 스크립트를 복사해서 붙여넣고 Enter

console.log("🚀 ProductV2 자동 다운로드 시작!");

// 다운로드 함수
function downloadImage(url, filename, delay = 1000) {
    return new Promise((resolve) => {
        setTimeout(() => {
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.style.display = 'none';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            console.log('✅ 다운로드:', filename);
            resolve();
        }, delay);
    });
}

// 메인 다운로드 함수
async function downloadAllImages() {
    let count = 0;
    const total = ${extractedProducts.reduce((total, product) => {
        let count = 0;
        if (product.mainImage) count++;
        if (product.instagramImage) count++;
        count += product.colorVariants ? product.colorVariants.length : 0;
        return total + count;
    }, 0)};
    
    console.log(\`📊 총 \${total}개 이미지를 다운로드합니다...\`);
`;

            extractedProducts.forEach((product, index) => {
                script += `
    // 제품 ${index + 1}: ${product.name}
    console.log("📦 제품 ${index + 1}: ${product.name}");
`;

                // 메인 이미지
                if (product.mainImage) {
                    const extension = product.mainImage.includes('.webp') ? 'webp' : 'jpg';
                    script += `    await downloadImage("${product.mainImage}", "${product.id}-main.${extension}", 1000);
    count++;
    console.log(\`진행률: \${count}/\${total}\`);
`;
                }

                // 호버 이미지
                if (product.instagramImage) {
                    const extension = product.instagramImage.includes('.webp') ? 'webp' : 'jpg';
                    script += `    await downloadImage("${product.instagramImage}", "${product.id}-hover.${extension}", 1000);
    count++;
    console.log(\`진행률: \${count}/\${total}\`);
`;
                }

                // 색상 변형들
                if (product.colorVariants && product.colorVariants.length > 0) {
                    product.colorVariants.forEach(color => {
                        const extension = color.thumbnail.includes('.webp') ? 'webp' : 'jpg';
                        const colorName = color.name.toLowerCase().replace(/\s+/g, '-');
                        script += `    await downloadImage("${color.thumbnail}", "${product.id}-${colorName}.${extension}", 1000);
    count++;
    console.log(\`진행률: \${count}/\${total}\`);
`;
                    });
                }
            });

            script += `
    console.log("🎉 모든 다운로드 완료!");
    console.log("📁 다운로드된 파일들을 다음 폴더 구조로 정리하세요:");
    console.log("public/images/products/v2/");
    console.log("├── 제품명/main/ - 메인 이미지");
    console.log("├── 제품명/hover/ - 호버 이미지"); 
    console.log("└── 제품명/colors/ - 색상 변형들");
}

// 다운로드 시작
downloadAllImages().catch(console.error);

// 참고: 브라우저에서 한 번에 너무 많은 다운로드를 하면 차단될 수 있습니다.
// 필요시 위의 delay 값을 늘려서 다운로드 간격을 조정하세요.
`;

            // 스크립트를 새 창에 표시
            const newWindow = window.open('', '_blank');
            newWindow.document.write(`
                <!DOCTYPE html>
                <html lang="ko">
                <head>
                    <meta charset="UTF-8">
                    <title>브라우저 콘솔 스크립트</title>
                    <style>
                        body { font-family: 'Courier New', monospace; margin: 20px; background: #1e1e1e; color: #d4d4d4; }
                        .container { max-width: 1000px; margin: 0 auto; }
                        pre { background: #2d2d30; padding: 20px; border-radius: 8px; overflow-x: auto; border: 1px solid #3e3e42; }
                        .copy-btn { background: #007acc; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; margin: 10px 0; }
                        .copy-btn:hover { background: #005a9e; }
                        .instructions { background: #0e639c; color: white; padding: 15px; border-radius: 8px; margin: 20px 0; }
                        .warning { background: #f0ad4e; color: #8a6d3b; padding: 10px; border-radius: 4px; margin: 10px 0; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>🤖 브라우저 콘솔 자동 다운로드 스크립트</h1>
                        
                        <div class="instructions">
                            <h3>📋 사용법:</h3>
                            <ol>
                                <li><strong>F12</strong>를 눌러 개발자 도구 열기</li>
                                <li><strong>Console</strong> 탭 클릭</li>
                                <li>아래 스크립트를 <strong>복사해서 붙여넣고 Enter</strong></li>
                                <li>자동으로 ${extractedProducts.reduce((total, product) => {
                                    let count = 0;
                                    if (product.mainImage) count++;
                                    if (product.instagramImage) count++;
                                    count += product.colorVariants ? product.colorVariants.length : 0;
                                    return total + count;
                                }, 0)}개 파일 다운로드 시작!</li>
                            </ol>
                        </div>
                        
                        <div class="warning">
                            ⚠️ <strong>주의:</strong> 브라우저가 팝업을 차단하거나 다운로드를 제한할 수 있습니다. 
                            필요시 팝업 허용 설정을 확인하세요.
                        </div>
                        
                        <button class="copy-btn" onclick="copyScript()">📋 스크립트 복사</button>
                        
                        <pre id="script-content">${script.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
                    </div>
                    
                    <script>
                        function copyScript() {
                            const scriptContent = document.getElementById('script-content').textContent;
                            navigator.clipboard.writeText(scriptContent).then(() => {
                                alert('스크립트가 클립보드에 복사되었습니다!\\n\\nF12 → Console 탭에서 붙여넣으세요.');
                            }).catch(() => {
                                // 복사 실패 시 텍스트 선택
                                const range = document.createRange();
                                range.selectNode(document.getElementById('script-content'));
                                window.getSelection().removeAllRanges();
                                window.getSelection().addRange(range);
                                alert('스크립트를 선택했습니다. Ctrl+C로 복사하세요.');
                            });
                        }
                    </script>
                </body>
                </html>
            `);
        }

        function clearAll() {
            document.getElementById('htmlInput').value = '';
            document.getElementById('results').innerHTML = '';
            extractedProducts = [];
        }
    </script>
</body>
</html>